#!/bin/bash

set -ueo pipefail

LXC_SSHSETUP_PATH="$HOME/.ssh/lxc"

info() {
    printf "%s\n" "$*" >&2
}

fatal() {
    printf "%s\n" "$*" >&2
    exit 1
}

runlxc() {
    sudo lxc "$@"
}

fatal_usage() {
    fatal "usage: ${0##*/} [<user>@]<instance>[:<port>]..."
}

quote() {
    prefix=$'  > \e[2m'
    suffix=$'\e[m'
    sed -e "s/^/${prefix}/" -e "s/\$/${suffix}/"
}

targets=("$@")
if [ "${#targets[@]}" -eq 0 ]; then
    fatal_usage
fi

instances="$(runlxc list --format=json)"

setup() {
    target="$1"
    port="${target##*:}"
    port="${port:-22}"
    host="${target%%:*}"
    if (grep -q "@" <<< "${host}"); then
        user="$(cut -d @ -f 1 <<< "${host}")"
        name="$(cut -d @ -f 2- <<< "${host}")"
    else
        user="root"
        name="${host}"
    fi

    info "checking instance '${name}'..."
    query="map(select(.name == \"${name}\")) | first"
    info="$(jq "${query}" <<< "${instances}")"
    if [ "${info}" == "null" ]; then
        fatal "could not find instance '${name}'"
    fi

    status="$(jq -r ".status" <<< "${info}")"
    if [ ! "${status}" = "Running" ]; then
        fatal "instance '${name}' is not running"
    fi

    query='
        .state.network.eth0.addresses
        | map(select(.scope == "global" and .family == "inet")) | first.address
    '
    address="$(jq -r "${query}" <<< "${info}")"
    if [ "${address}" = "null" ]; then
        fatal "could not find reachable ipv4 address"
    fi

    info "address: ${address}"

    key_file="${LXC_SSHSETUP_PATH}/key"
    pubkey_file="${key_file}.pub"
    config_file="${LXC_SSHSETUP_PATH}/${name}.config"

    if [ ! -f "${key_file}" ]; then
        info "generating public key pair..."
        dir="$(dirname "${key_file}")"
        mkdir -p "${dir}"
        chmod 700 "${dir}"
        ssh-keygen -t ed25519 -f "${key_file}" -N "" >&2
    fi

    sshd_script="$(cat <<"EOS"
set -ueo pipefail
trap "echo ERROR" ERR
silent() {
    "$@" >/dev/null 2>&1
}
if ! (silent sshd -V); then
    echo "installing sshd..."
    if silent pacman -V; then
        pacman -Syu --noconfirm && pacman -S openssh --noconfirm
    elif silent apt-get -v; then
        apt-get update && apt-get install -y --no-install-recommends openssh-server
    else
        echo "could not find any supported package managers" >&2 && exit 1
    fi
fi
if (systemctl status ssh >/dev/null 2>&1); then
    systemctl enable ssh && systemctl start ssh
else
    systemctl enable sshd && systemctl start sshd
fi
EOS
)"

    info "configuring instance '${name}'..."
    runlxc exec "${name}" -- bash -c "${sshd_script}" 2>&1 | quote >&2

    key_script="$(cat <<"EOS"
set -ueo pipefail
KEYS_PATH="$HOME/.ssh/authorized_keys"
read key
if ! (grep -F "$key" "$KEYS_PATH" >/dev/null 2>&1); then
    mkdir -p "$HOME/.ssh" && chmod 700 "$HOME/.ssh" && cat >> "$KEYS_PATH" <<< "$key"
fi
EOS
)"

    info "updating authorized keys of '${user}@${name}'..."
    su=()
    if [ "${user}" != "root" ]; then
        su=("su" "-l" "${user}")
    fi
    runlxc exec "${name}" -- "${su[@]}" bash -c "${key_script}" 2>&1 < "${pubkey_file}" | quote >&2

    info "writing ssh config to '${name}'..."
    cat > "${config_file}" <<EOS
Host ${name}
    HostName ${address}
    User ${user}
    IdentityFile ${key_file}
    StrictHostKeyChecking no
    Port ${port}
EOS

    info "setup completed"
}

for target in "${targets[@]}"; do
    setup "${target}"
done
